* FEATURE: matrix: week view.
    * Back-end.
    * Front-end: URL-only.
    * Front-end: WebUI.
* FEATURE: matrix: day range filter.
    * Front-end: URL-only.
    * Front-end: WebUI.
* FEATURE: matrix: rule filter.
    * Front-end: URL-only.
    * Front-end: WebUI.
* FEATURE: day notes.
    * Back-end: support in back-ups.
    * Front-end: read-only.
    * Front-end: read-write.
* FEATURE: fully customizable percetange formual.
    * Back-end.
    * Front-end: URL-only.
    * Front-end: WebUI.
* FEATURE: ability to add unscheduled rule.

* REFACTORIZATION: Call read_matrix.lua once at startup.
* REFACTORIZATION: Optimize human-readable back-ups through date-directory structure.
* REFACTORIZATION: Robustness (back-end, don't expect any valid input from client).
* REFACTORIZATION: Robustness (back-end, don't expect any valid output from database).
* REFACTORIZATION: Robustness (front-end, don't expect any valid output from server).
* REFACTORIZATION: Profile and optimize (back-end).
* REFACTORIZATION: Minimize SQL query count.
* REFACTORIZATION: Proper error messages.
* FIX: properly support overlapping schedules (different weekdays).
* FIX: properly treat multiple schedules in weekly matrix.


* FEATURE: schedule groups.
* FEATURE: Undo/Redo (front-end).
* REFACTORIZATION: Documentation.
* REFACTORIZATION: Test suite.
* REFACTORIZATION: Philosophy.
* FEATURE: Achievements.
* REFACTORIZATION: CSS. Mobile integration.
* FEATURE: CRUD rule_schedule.
* FEATURE: Other CRUD tables (remove init.sql).
* FEATURE: Statistics (day, daily, aggregate).
* REFACTORIZATION: Typed (compiled?) back-end language.
* REFACTORIZATION: Typed front-end language.
