* FEATURE: matrix: day range filter.
    * URL-only.
    * WebUI.
* FEATURE: matrix: rule filter.
    * URL-only.
    * WebUI.
* FEATURE: day notes.
    * Invisible (in the matrix) days for notes only, like rave days.
    * Read-only.
    * Read-write.
* FEATURE: rule streak.
    * Current.
    * Record.
* FEATURE: fully customizable percetange formual.
    * URL-only.
    * WebUI.


* REFACTORIZATION: Call read_matrix.lua once at startup.
* REFACTORIZATION: Optimize human-readable back-ups through date-directory structure.
* REFACTORIZATION: Robustness (back-end, don't expect any valid input from client).
* REFACTORIZATION: Robustness (back-end, don't expect any valid output from database).
* REFACTORIZATION: Robustness (front-end, don't expect any valid output from server).
* REFACTORIZATION: Profile and optimize (back-end).
* REFACTORIZATION: Minimize SQL query count.
* REFACTORIZATION: Proper error messages.

* FEATURE: tier ladder (will require rule equivalency groups to prevent a trailing exercise sabotaging entire tier).
* FEATURE: schedule groups.
* FEATURE: Undo/Redo (front-end).
* REFACTORIZATION: Documentation.
* REFACTORIZATION: Test suite.
* REFACTORIZATION: Philosophy.
* FEATURE: Achievements.
* REFACTORIZATION: CSS. Mobile integration.
* FEATURE: CRUD rule_schedule.
* FEATURE: Other CRUD tables (remove init.sql).
* FEATURE: Statistics (day, daily, aggregate).
* REFACTORIZATION: Typed (compiled?) back-end language.
* REFACTORIZATION: Typed front-end language.
