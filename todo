1. FEATURE: Matrix view.
1. 1. Extract rules.
1. 2. Extract rule schedule into rule.
1. 3. Extract rule_instance into rule.
1. 4. Find earliest available day.
1. 5. Find latest available day.
1. 6. Iterate over days.
1. 6. 1. If day is unavailable, fill with -1 and go to [2.6].
1. 6. 2. Iterate over rules.
1. 6. 2. 1. Check if applicable rule schedule exists. If not, fill with -1 and go to [2.6.2].
1. 6. 2. 2. Check if mandatory (iterate over rule schedules & (last) instances).
1. 6. 2. 3. Check if done (iterate over rule instances).
1. 6. 2. 4. Return from 0 to 3.
1. 7. Report results.
1. 8. Front-end work...

* REFACTORIZATION: Robustness (front-end).
* REFACTORIZATION: Robustness (back-end).
* REFACTORIZATION: No global state (front-end).
* REFACTORIZATION: No reloads (front-end).
* REFACTORIZATION: Profile and optimize (back-end).
* FEATURE: Notes (front-end).
* FEATURE: Informational headers (front-end).
* FEATURE: Undo/Redo (front-end).
* REFACTORIZATION: Documentation.
* REFACTORIZATION: Test suite.
* REFACTORIZATION: Philosophy.
* FEATURE: Achievements.
* REFACTORIZATION: CSS. Mobile integration.
* FEATURE: CRUD rule_schedule.
* FEATURE: Other CRUD tables (remove init.sql).
* FEATURE: Statistics (day, daily, aggregate).
* REFACTORIZATION: Typed (compiled?) back-end language.
* REFACTORIZATION: Typed front-end language.
